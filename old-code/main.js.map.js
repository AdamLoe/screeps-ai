module.exports = {"version":3,"file":"main.js","sources":["src/Prototypes/Source.js","src/Prototypes/Generic.js","src/Prototypes/Creep.js","src/Prototypes/Structure.js","src/Traveler.js","src/Helpers/Memory.js","src/Controller/initializeRoomMemory.js","src/Controller/roomController.js","src/Spawning/spawnQueue.js","src/Helpers/deepCompare.js","src/Spawning/autoRoster.js","src/Controller/updateSources.js","src/Controller/updateSpies.js","src/Controller/updateCreepRoster.js","src/Spawning/spawnController.js","src/Creeps/checkTask.js","src/Helpers/navigation.js","src/Creeps/runTask.js","src/Creeps/setTask.js","src/Roles/harvesterRun.js","src/Roles/courierRun.js","src/Creeps/getNewTask.js","src/Creeps/creepController.js","src/Structures/towerActions.js","src/Helpers/cleanup.js","src/main.js"],"sourcesContent":["Object.defineProperty(Source.prototype, \"memory\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id];\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Source.prototype, \"harvesters\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id].harvesters.map( creepId => Game.creeps[creepId] );\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Source.prototype, \"couriers\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id].couriers.map( creepId => Game.creeps[creepId] );\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n\r\nmodule.exports = () => {};\r\n\r\n","Object.compare = function (obj1, obj2) {\r\n\t//Loop through properties in object 1\r\n\tfor (let p in obj1) {\r\n\t\t//Check property exists on both objects\r\n\t\tif (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n\t\tswitch (typeof (obj1[p])) {\r\n\t\t\t//Deep compare objects\r\n\t\t\tcase \"object\":\r\n\t\t\t\tif (!Object.compare(obj1[p], obj2[p])) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//Compare function code\r\n\t\t\tcase \"function\":\r\n\t\t\t\tif (typeof (obj2[p]) === \"undefined\" || (p !== \"compare\" && obj1[p].toString() !== obj2[p].toString())) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//Compare values\r\n\t\t\tdefault:\r\n\t\t\t\tif (obj1[p] !== obj2[p]) return false;\r\n\t\t}\r\n\t}\r\n\r\n\t//Check object 2 for any extra properties\r\n\tfor (let p in obj2) {\r\n\t\tif (typeof (obj1[p]) === \"undefined\") return false;\r\n\t}\r\n\treturn true;\r\n};","\r\n/*\r\n\r\nObject.defineProperty(Creep.prototype, \"harvest\", {\r\n\tget() {\r\n\r\n\t},\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Creep.prototype, \"transfer\", {\r\n\tget() {\r\n\r\n\t},\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Creep.prototype, \"upgrade\", {\r\n\tget() {\r\n\r\n\t},\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Creep.prototype, \"transfer\", {\r\n\tget() {\r\n\r\n\t},\r\n\tconfigurable: true\r\n});\r\n\r\n\r\n    \r\n*/","Structure.prototype.currEnergy = function() {\r\n\tswitch(this.structureType) {\r\n\t\tcase STRUCTURE_STORAGE:\r\n\t\tcase STRUCTURE_CONTAINER:\r\n\t\t\treturn this.store;\r\n\t\tcase STRUCTURE_EXTENSION:\r\n\t\tcase STRUCTURE_LINK:\r\n\t\tcase STRUCTURE_SPAWN:\r\n\t\t\treturn this.energy;\r\n\t}\r\n};\r\n\r\nStructure.prototype.maxEnergy = function() {\r\n\tswitch(this.structureType) {\r\n\t\tcase STRUCTURE_STORAGE:\r\n\t\tcase STRUCTURE_CONTAINER:\r\n\t\t\treturn this.storeCapacity;\r\n\t\tcase STRUCTURE_EXTENSION:\r\n\t\tcase STRUCTURE_LINK:\r\n\t\t\treturn this.energyCapacity;\r\n\t\tcase STRUCTURE_SPAWN:\r\n\t\t\treturn this.energyCapacity;\r\n\t}\r\n};","/**\r\n * To start using Traveler, require it in main.js:\r\n * Example: var Traveler = require('Traveler.js');\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Traveler {\r\n\t/**\r\n     * move creep to destination\r\n     * @param creep\r\n     * @param destination\r\n     * @param options\r\n     * @returns {number}\r\n     */\r\n\tstatic travelTo(creep, destination, options = {}) {\r\n\t\t// uncomment if you would like to register hostile rooms entered\r\n\t\t// this.updateRoomStatus(creep.room);\r\n\t\tif (!destination) {\r\n\t\t\treturn ERR_INVALID_ARGS;\r\n\t\t}\r\n\t\tif (creep.fatigue > 0) {\r\n\t\t\tTraveler.circle(creep.pos, \"aqua\", .3);\r\n\t\t\treturn ERR_TIRED;\r\n\t\t}\r\n\t\tdestination = this.normalizePos(destination);\r\n\t\t// manage case where creep is nearby destination\r\n\t\tlet rangeToDestination = creep.pos.getRangeTo(destination);\r\n\t\tif (options.range && rangeToDestination <= options.range) {\r\n\t\t\treturn OK;\r\n\t\t}\r\n\t\telse if (rangeToDestination <= 1) {\r\n\t\t\tif (rangeToDestination === 1 && !options.range) {\r\n\t\t\t\tlet direction = creep.pos.getDirectionTo(destination);\r\n\t\t\t\tif (options.returnData) {\r\n\t\t\t\t\toptions.returnData.nextPos = destination;\r\n\t\t\t\t\toptions.returnData.path = direction.toString();\r\n\t\t\t\t}\r\n\t\t\t\treturn creep.move(direction);\r\n\t\t\t}\r\n\t\t\treturn OK;\r\n\t\t}\r\n\t\t// initialize data object\r\n\t\tif (!creep.memory._trav) {\r\n\t\t\tdelete creep.memory._travel;\r\n\t\t\tcreep.memory._trav = {};\r\n\t\t}\r\n\t\tlet travelData = creep.memory._trav;\r\n\t\tlet state = this.deserializeState(travelData, destination);\r\n\t\t// uncomment to visualize destination\r\n\t\t// this.circle(destination.pos, \"orange\");\r\n\t\t// check if creep is stuck\r\n\t\tif (this.isStuck(creep, state)) {\r\n\t\t\tstate.stuckCount++;\r\n\t\t\tTraveler.circle(creep.pos, \"magenta\", state.stuckCount * .2);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstate.stuckCount = 0;\r\n\t\t}\r\n\t\t// handle case where creep is stuck\r\n\t\tif (!options.stuckValue) {\r\n\t\t\toptions.stuckValue = DEFAULT_STUCK_VALUE;\r\n\t\t}\r\n\t\tif (state.stuckCount >= options.stuckValue && Math.random() > .5) {\r\n\t\t\toptions.ignoreCreeps = false;\r\n\t\t\toptions.freshMatrix = true;\r\n\t\t\tdelete travelData.path;\r\n\t\t}\r\n\t\t// TODO:handle case where creep moved by some other function, but destination is still the same\r\n\t\t// delete path cache if destination is different\r\n\t\tif (!this.samePos(state.destination, destination)) {\r\n\t\t\tif (options.movingTarget && state.destination.isNearTo(destination)) {\r\n\t\t\t\ttravelData.path += state.destination.getDirectionTo(destination);\r\n\t\t\t\tstate.destination = destination;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelete travelData.path;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (options.repath && Math.random() < options.repath) {\r\n\t\t\t// add some chance that you will find a new path randomly\r\n\t\t\tdelete travelData.path;\r\n\t\t}\r\n\t\t// pathfinding\r\n\t\tlet newPath = false;\r\n\t\tif (!travelData.path) {\r\n\t\t\tnewPath = true;\r\n\t\t\tif (creep.spawning) {\r\n\t\t\t\treturn ERR_BUSY;\r\n\t\t\t}\r\n\t\t\tstate.destination = destination;\r\n\t\t\tlet cpu = Game.cpu.getUsed();\r\n\t\t\tlet ret = this.findTravelPath(creep.pos, destination, options);\r\n\t\t\tlet cpuUsed = Game.cpu.getUsed() - cpu;\r\n\t\t\tstate.cpu = _.round(cpuUsed + state.cpu);\r\n\t\t\tif (state.cpu > REPORT_CPU_THRESHOLD) {\r\n\t\t\t\t// see note at end of file for more info on this\r\n\t\t\t\tconsole.log(`TRAVELER: heavy cpu use: ${creep.name}, cpu: ${state.cpu} origin: ${creep.pos}, dest: ${destination}`);\r\n\t\t\t}\r\n\t\t\tlet color = \"orange\";\r\n\t\t\tif (ret.incomplete) {\r\n\t\t\t\t// uncommenting this is a great way to diagnose creep behavior issues\r\n\t\t\t\t// console.log(`TRAVELER: incomplete path for ${creep.name}`);\r\n\t\t\t\tcolor = \"red\";\r\n\t\t\t}\r\n\t\t\tif (options.returnData) {\r\n\t\t\t\toptions.returnData.pathfinderReturn = ret;\r\n\t\t\t}\r\n\t\t\ttravelData.path = Traveler.serializePath(creep.pos, ret.path, color);\r\n\t\t\tstate.stuckCount = 0;\r\n\t\t}\r\n\t\tthis.serializeState(creep, destination, state, travelData);\r\n\t\tif (!travelData.path || travelData.path.length === 0) {\r\n\t\t\treturn ERR_NO_PATH;\r\n\t\t}\r\n\t\t// consume path\r\n\t\tif (state.stuckCount === 0 && !newPath) {\r\n\t\t\ttravelData.path = travelData.path.substr(1);\r\n\t\t}\r\n\t\tlet nextDirection = parseInt(travelData.path[0], 10);\r\n\t\tif (options.returnData) {\r\n\t\t\tif (nextDirection) {\r\n\t\t\t\tlet nextPos = Traveler.positionAtDirection(creep.pos, nextDirection);\r\n\t\t\t\tif (nextPos) {\r\n\t\t\t\t\toptions.returnData.nextPos = nextPos;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\toptions.returnData.state = state;\r\n\t\t\toptions.returnData.path = travelData.path;\r\n\t\t}\r\n\t\treturn creep.move(nextDirection);\r\n\t}\r\n\t/**\r\n     * make position objects consistent so that either can be used as an argument\r\n     * @param destination\r\n     * @returns {any}\r\n     */\r\n\tstatic normalizePos(destination) {\r\n\t\tif (!(destination instanceof RoomPosition)) {\r\n\t\t\treturn destination.pos;\r\n\t\t}\r\n\t\treturn destination;\r\n\t}\r\n\t/**\r\n     * check if room should be avoided by findRoute algorithm\r\n     * @param roomName\r\n     * @returns {RoomMemory|number}\r\n     */\r\n\tstatic checkAvoid(roomName) {\r\n\t\treturn Memory.rooms && Memory.rooms[roomName] && Memory.rooms[roomName].avoid;\r\n\t}\r\n\t/**\r\n     * check if a position is an exit\r\n     * @param pos\r\n     * @returns {boolean}\r\n     */\r\n\tstatic isExit(pos) {\r\n\t\treturn pos.x === 0 || pos.y === 0 || pos.x === 49 || pos.y === 49;\r\n\t}\r\n\t/**\r\n     * check two coordinates match\r\n     * @param pos1\r\n     * @param pos2\r\n     * @returns {boolean}\r\n     */\r\n\tstatic sameCoord(pos1, pos2) {\r\n\t\treturn pos1.x === pos2.x && pos1.y === pos2.y;\r\n\t}\r\n\t/**\r\n     * check if two positions match\r\n     * @param pos1\r\n     * @param pos2\r\n     * @returns {boolean}\r\n     */\r\n\tstatic samePos(pos1, pos2) {\r\n\t\treturn this.sameCoord(pos1, pos2) && pos1.roomName === pos2.roomName;\r\n\t}\r\n\t/**\r\n     * draw a circle at position\r\n     * @param pos\r\n     * @param color\r\n     * @param opacity\r\n     */\r\n\tstatic circle(pos, color, opacity) {\r\n\t\tnew RoomVisual(pos.roomName).circle(pos, {\r\n\t\t\tradius: .45, fill: \"transparent\", stroke: color, strokeWidth: .15, opacity: opacity\r\n\t\t});\r\n\t}\r\n\t/**\r\n     * update memory on whether a room should be avoided based on controller owner\r\n     * @param room\r\n     */\r\n\tstatic updateRoomStatus(room) {\r\n\t\tif (!room) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (room.controller) {\r\n\t\t\tif (room.controller.owner && !room.controller.my) {\r\n\t\t\t\troom.memory.avoid = 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelete room.memory.avoid;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n     * find a path from origin to destination\r\n     * @param origin\r\n     * @param destination\r\n     * @param options\r\n     * @returns {PathfinderReturn}\r\n     */\r\n\tstatic findTravelPath(origin, destination, options = {}) {\r\n\t\t_.defaults(options, {\r\n\t\t\tignoreCreeps: true,\r\n\t\t\tmaxOps: DEFAULT_MAXOPS,\r\n\t\t\trange: 1,\r\n\t\t});\r\n\t\tif (options.movingTarget) {\r\n\t\t\toptions.range = 0;\r\n\t\t}\r\n\t\torigin = this.normalizePos(origin);\r\n\t\tdestination = this.normalizePos(destination);\r\n\t\tlet originRoomName = origin.roomName;\r\n\t\tlet destRoomName = destination.roomName;\r\n\t\t// check to see whether findRoute should be used\r\n\t\tlet roomDistance = Game.map.getRoomLinearDistance(origin.roomName, destination.roomName);\r\n\t\tlet allowedRooms = options.route;\r\n\t\tif (!allowedRooms && (options.useFindRoute || (options.useFindRoute === undefined && roomDistance > 2))) {\r\n\t\t\tlet route = this.findRoute(origin.roomName, destination.roomName, options);\r\n\t\t\tif (route) {\r\n\t\t\t\tallowedRooms = route;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet roomsSearched = 0;\r\n\t\tlet callback = (roomName) => {\r\n\t\t\tif (allowedRooms) {\r\n\t\t\t\tif (!allowedRooms[roomName]) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!options.allowHostile && Traveler.checkAvoid(roomName)\r\n                && roomName !== destRoomName && roomName !== originRoomName) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\troomsSearched++;\r\n\t\t\tlet matrix;\r\n\t\t\tlet room = Game.rooms[roomName];\r\n\t\t\tif (room) {\r\n\t\t\t\tif (options.ignoreStructures) {\r\n\t\t\t\t\tmatrix = new PathFinder.CostMatrix();\r\n\t\t\t\t\tif (!options.ignoreCreeps) {\r\n\t\t\t\t\t\tTraveler.addCreepsToMatrix(room, matrix);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (options.ignoreCreeps || roomName !== originRoomName) {\r\n\t\t\t\t\tmatrix = this.getStructureMatrix(room, options.freshMatrix);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmatrix = this.getCreepMatrix(room);\r\n\t\t\t\t}\r\n\t\t\t\tif (options.obstacles) {\r\n\t\t\t\t\tmatrix = matrix.clone();\r\n\t\t\t\t\tfor (let obstacle of options.obstacles) {\r\n\t\t\t\t\t\tif (obstacle.pos.roomName !== roomName) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmatrix.set(obstacle.pos.x, obstacle.pos.y, 0xff);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (options.roomCallback) {\r\n\t\t\t\tif (!matrix) {\r\n\t\t\t\t\tmatrix = new PathFinder.CostMatrix();\r\n\t\t\t\t}\r\n\t\t\t\tlet outcome = options.roomCallback(roomName, matrix.clone());\r\n\t\t\t\tif (outcome !== undefined) {\r\n\t\t\t\t\treturn outcome;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn matrix;\r\n\t\t};\r\n\t\tlet ret = PathFinder.search(origin, { pos: destination, range: options.range }, {\r\n\t\t\tmaxOps: options.maxOps,\r\n\t\t\tmaxRooms: options.maxRooms,\r\n\t\t\tplainCost: options.offRoad ? 1 : options.ignoreRoads ? 1 : 2,\r\n\t\t\tswampCost: options.offRoad ? 1 : options.ignoreRoads ? 5 : 10,\r\n\t\t\troomCallback: callback,\r\n\t\t});\r\n\t\tif (ret.incomplete && options.ensurePath) {\r\n\t\t\tif (options.useFindRoute === undefined) {\r\n\t\t\t\t// handle case where pathfinder failed at a short distance due to not using findRoute\r\n\t\t\t\t// can happen for situations where the creep would have to take an uncommonly indirect path\r\n\t\t\t\t// options.allowedRooms and options.routeCallback can also be used to handle this situation\r\n\t\t\t\tif (roomDistance <= 2) {\r\n\t\t\t\t\tconsole.log(\"TRAVELER: path failed without findroute, trying with options.useFindRoute = true\");\r\n\t\t\t\t\tconsole.log(`from: ${origin}, destination: ${destination}`);\r\n\t\t\t\t\toptions.useFindRoute = true;\r\n\t\t\t\t\tret = this.findTravelPath(origin, destination, options);\r\n\t\t\t\t\tconsole.log(`TRAVELER: second attempt was ${ret.incomplete ? \"not \" : \"\"}successful`);\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\t\t\t\t// TODO: handle case where a wall or some other obstacle is blocking the exit assumed by findRoute\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t/**\r\n     * find a viable sequence of rooms that can be used to narrow down pathfinder's search algorithm\r\n     * @param origin\r\n     * @param destination\r\n     * @param options\r\n     * @returns {{}}\r\n     */\r\n\tstatic findRoute(origin, destination, options = {}) {\r\n\t\tlet restrictDistance = options.restrictDistance || Game.map.getRoomLinearDistance(origin, destination) + 10;\r\n\t\tlet allowedRooms = { [origin]: true, [destination]: true };\r\n\t\tlet highwayBias = 1;\r\n\t\tif (options.preferHighway) {\r\n\t\t\thighwayBias = 2.5;\r\n\t\t\tif (options.highwayBias) {\r\n\t\t\t\thighwayBias = options.highwayBias;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet ret = Game.map.findRoute(origin, destination, {\r\n\t\t\trouteCallback: (roomName) => {\r\n\t\t\t\tif (options.routeCallback) {\r\n\t\t\t\t\tlet outcome = options.routeCallback(roomName);\r\n\t\t\t\t\tif (outcome !== undefined) {\r\n\t\t\t\t\t\treturn outcome;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet rangeToRoom = Game.map.getRoomLinearDistance(origin, roomName);\r\n\t\t\t\tif (rangeToRoom > restrictDistance) {\r\n\t\t\t\t\t// room is too far out of the way\r\n\t\t\t\t\treturn Number.POSITIVE_INFINITY;\r\n\t\t\t\t}\r\n\t\t\t\tif (!options.allowHostile && Traveler.checkAvoid(roomName) &&\r\n                    roomName !== destination && roomName !== origin) {\r\n\t\t\t\t\t// room is marked as \"avoid\" in room memory\r\n\t\t\t\t\treturn Number.POSITIVE_INFINITY;\r\n\t\t\t\t}\r\n\t\t\t\tlet parsed;\r\n\t\t\t\tif (options.preferHighway) {\r\n\t\t\t\t\tparsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);\r\n\t\t\t\t\tlet isHighway = (parsed[1] % 10 === 0) || (parsed[2] % 10 === 0);\r\n\t\t\t\t\tif (isHighway) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// SK rooms are avoided when there is no vision in the room, harvested-from SK rooms are allowed\r\n\t\t\t\tif (!options.allowSK && !Game.rooms[roomName]) {\r\n\t\t\t\t\tif (!parsed) {\r\n\t\t\t\t\t\tparsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet fMod = parsed[1] % 10;\r\n\t\t\t\t\tlet sMod = parsed[2] % 10;\r\n\t\t\t\t\tlet isSK = !(fMod === 5 && sMod === 5) &&\r\n                        ((fMod >= 4) && (fMod <= 6)) &&\r\n                        ((sMod >= 4) && (sMod <= 6));\r\n\t\t\t\t\tif (isSK) {\r\n\t\t\t\t\t\treturn 10 * highwayBias;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn highwayBias;\r\n\t\t\t},\r\n\t\t});\r\n\t\tif (!_.isArray(ret)) {\r\n\t\t\tconsole.log(`couldn't findRoute to ${destination}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (let value of ret) {\r\n\t\t\tallowedRooms[value.room] = true;\r\n\t\t}\r\n\t\treturn allowedRooms;\r\n\t}\r\n\t/**\r\n     * check how many rooms were included in a route returned by findRoute\r\n     * @param origin\r\n     * @param destination\r\n     * @returns {number}\r\n     */\r\n\tstatic routeDistance(origin, destination) {\r\n\t\tlet linearDistance = Game.map.getRoomLinearDistance(origin, destination);\r\n\t\tif (linearDistance >= 32) {\r\n\t\t\treturn linearDistance;\r\n\t\t}\r\n\t\tlet allowedRooms = this.findRoute(origin, destination);\r\n\t\tif (allowedRooms) {\r\n\t\t\treturn Object.keys(allowedRooms).length;\r\n\t\t}\r\n\t}\r\n\t/**\r\n     * build a cost matrix based on structures in the room. Will be cached for more than one tick. Requires vision.\r\n     * @param room\r\n     * @param freshMatrix\r\n     * @returns {any}\r\n     */\r\n\tstatic getStructureMatrix(room, freshMatrix) {\r\n\t\tif (!this.structureMatrixCache[room.name] || (freshMatrix && Game.time !== this.structureMatrixTick)) {\r\n\t\t\tthis.structureMatrixTick = Game.time;\r\n\t\t\tlet matrix = new PathFinder.CostMatrix();\r\n\t\t\tthis.structureMatrixCache[room.name] = Traveler.addStructuresToMatrix(room, matrix, 1);\r\n\t\t}\r\n\t\treturn this.structureMatrixCache[room.name];\r\n\t}\r\n\t/**\r\n     * build a cost matrix based on creeps and structures in the room. Will be cached for one tick. Requires vision.\r\n     * @param room\r\n     * @returns {any}\r\n     */\r\n\tstatic getCreepMatrix(room) {\r\n\t\tif (!this.creepMatrixCache[room.name] || Game.time !== this.creepMatrixTick) {\r\n\t\t\tthis.creepMatrixTick = Game.time;\r\n\t\t\tthis.creepMatrixCache[room.name] = Traveler.addCreepsToMatrix(room, this.getStructureMatrix(room, true).clone());\r\n\t\t}\r\n\t\treturn this.creepMatrixCache[room.name];\r\n\t}\r\n\t/**\r\n     * add structures to matrix so that impassible structures can be avoided and roads given a lower cost\r\n     * @param room\r\n     * @param matrix\r\n     * @param roadCost\r\n     * @returns {CostMatrix}\r\n     */\r\n\tstatic addStructuresToMatrix(room, matrix, roadCost) {\r\n\t\tlet impassibleStructures = [];\r\n\t\tfor (let structure of room.find(FIND_STRUCTURES)) {\r\n\t\t\tif (structure instanceof StructureRampart) {\r\n\t\t\t\tif (!structure.my && !structure.isPublic) {\r\n\t\t\t\t\timpassibleStructures.push(structure);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (structure instanceof StructureRoad) {\r\n\t\t\t\tmatrix.set(structure.pos.x, structure.pos.y, roadCost);\r\n\t\t\t}\r\n\t\t\telse if (structure instanceof StructureContainer) {\r\n\t\t\t\tmatrix.set(structure.pos.x, structure.pos.y, 5);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\timpassibleStructures.push(structure);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let site of room.find(FIND_MY_CONSTRUCTION_SITES)) {\r\n\t\t\tif (site.structureType === STRUCTURE_CONTAINER || site.structureType === STRUCTURE_ROAD\r\n                || site.structureType === STRUCTURE_RAMPART) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tmatrix.set(site.pos.x, site.pos.y, 0xff);\r\n\t\t}\r\n\t\tfor (let structure of impassibleStructures) {\r\n\t\t\tmatrix.set(structure.pos.x, structure.pos.y, 0xff);\r\n\t\t}\r\n\t\treturn matrix;\r\n\t}\r\n\t/**\r\n     * add creeps to matrix so that they will be avoided by other creeps\r\n     * @param room\r\n     * @param matrix\r\n     * @returns {CostMatrix}\r\n     */\r\n\tstatic addCreepsToMatrix(room, matrix) {\r\n\t\troom.find(FIND_CREEPS).forEach((creep) => matrix.set(creep.pos.x, creep.pos.y, 0xff));\r\n\t\treturn matrix;\r\n\t}\r\n\t/**\r\n     * serialize a path, traveler style. Returns a string of directions.\r\n     * @param startPos\r\n     * @param path\r\n     * @param color\r\n     * @returns {string}\r\n     */\r\n\tstatic serializePath(startPos, path, color = \"orange\") {\r\n\t\tlet serializedPath = \"\";\r\n\t\tlet lastPosition = startPos;\r\n\t\tthis.circle(startPos, color);\r\n\t\tfor (let position of path) {\r\n\t\t\tif (position.roomName === lastPosition.roomName) {\r\n\t\t\t\tnew RoomVisual(position.roomName)\r\n\t\t\t\t\t.line(position, lastPosition, { color: color, lineStyle: \"dashed\" });\r\n\t\t\t\tserializedPath += lastPosition.getDirectionTo(position);\r\n\t\t\t}\r\n\t\t\tlastPosition = position;\r\n\t\t}\r\n\t\treturn serializedPath;\r\n\t}\r\n\t/**\r\n     * returns a position at a direction relative to origin\r\n     * @param origin\r\n     * @param direction\r\n     * @returns {RoomPosition}\r\n     */\r\n\tstatic positionAtDirection(origin, direction) {\r\n\t\tlet offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];\r\n\t\tlet offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];\r\n\t\tlet x = origin.x + offsetX[direction];\r\n\t\tlet y = origin.y + offsetY[direction];\r\n\t\tif (x > 49 || x < 0 || y > 49 || y < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn new RoomPosition(x, y, origin.roomName);\r\n\t}\r\n\t/**\r\n     * convert room avoidance memory from the old pattern to the one currently used\r\n     * @param cleanup\r\n     */\r\n\tstatic patchMemory(cleanup = false) {\r\n\t\tif (!Memory.empire) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!Memory.empire.hostileRooms) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet count = 0;\r\n\t\tfor (let roomName in Memory.empire.hostileRooms) {\r\n\t\t\tif (Memory.empire.hostileRooms[roomName]) {\r\n\t\t\t\tif (!Memory.rooms[roomName]) {\r\n\t\t\t\t\tMemory.rooms[roomName] = {};\r\n\t\t\t\t}\r\n\t\t\t\tMemory.rooms[roomName].avoid = 1;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tif (cleanup) {\r\n\t\t\t\tdelete Memory.empire.hostileRooms[roomName];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cleanup) {\r\n\t\t\tdelete Memory.empire.hostileRooms;\r\n\t\t}\r\n\t\tconsole.log(`TRAVELER: room avoidance data patched for ${count} rooms`);\r\n\t}\r\n\tstatic deserializeState(travelData, destination) {\r\n\t\tlet state = {};\r\n\t\tif (travelData.state) {\r\n\t\t\tstate.lastCoord = { x: travelData.state[STATE_PREV_X], y: travelData.state[STATE_PREV_Y] };\r\n\t\t\tstate.cpu = travelData.state[STATE_CPU];\r\n\t\t\tstate.stuckCount = travelData.state[STATE_STUCK];\r\n\t\t\tstate.destination = new RoomPosition(travelData.state[STATE_DEST_X], travelData.state[STATE_DEST_Y], travelData.state[STATE_DEST_ROOMNAME]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstate.cpu = 0;\r\n\t\t\tstate.destination = destination;\r\n\t\t}\r\n\t\treturn state;\r\n\t}\r\n\tstatic serializeState(creep, destination, state, travelData) {\r\n\t\ttravelData.state = [creep.pos.x, creep.pos.y, state.stuckCount, state.cpu, destination.x, destination.y,\r\n\t\t\tdestination.roomName];\r\n\t}\r\n\tstatic isStuck(creep, state) {\r\n\t\tlet stuck = false;\r\n\t\tif (state.lastCoord !== undefined) {\r\n\t\t\tif (this.sameCoord(creep.pos, state.lastCoord)) {\r\n\t\t\t\t// didn't move\r\n\t\t\t\tstuck = true;\r\n\t\t\t}\r\n\t\t\telse if (this.isExit(creep.pos) && this.isExit(state.lastCoord)) {\r\n\t\t\t\t// moved against exit\r\n\t\t\t\tstuck = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn stuck;\r\n\t}\r\n}\r\nTraveler.structureMatrixCache = {};\r\nTraveler.creepMatrixCache = {};\r\nexports.Traveler = Traveler;\r\n// this might be higher than you wish, setting it lower is a great way to diagnose creep behavior issues. When creeps\r\n// need to repath to often or they aren't finding valid paths, it can sometimes point to problems elsewhere in your code\r\nconst REPORT_CPU_THRESHOLD = 1000;\r\nconst DEFAULT_MAXOPS = 20000;\r\nconst DEFAULT_STUCK_VALUE = 2;\r\nconst STATE_PREV_X = 0;\r\nconst STATE_PREV_Y = 1;\r\nconst STATE_STUCK = 2;\r\nconst STATE_CPU = 3;\r\nconst STATE_DEST_X = 4;\r\nconst STATE_DEST_Y = 5;\r\nconst STATE_DEST_ROOMNAME = 6;\r\n// assigns a function to Creep.prototype: creep.travelTo(destination)\r\nCreep.prototype.travelTo = function (destination, options) {\r\n\treturn Traveler.travelTo(this, destination, options);\r\n};","let justReset = () => {\r\n\tif (_.size(Game.rooms) === 1) {\r\n\t\tif (_.find(Game.rooms).controller.level === 1) {\r\n\t\t\tif (_.size(Game.creeps) === 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nmodule.exports = () => {\r\n\r\n\tMemory.sources = Memory.sources || {};\r\n\tMemory.nameClk = Memory.nameClk || 0;\r\n    \r\n\tif ( justReset() ) {\r\n\t\tconsole.log(\"++++++ CLEARING OLD MEMORY ++++++++++\");\r\n\r\n\t\tMemory.rooms = {};\r\n\t\tMemory.spawns = {};\r\n\t\tMemory.sources = {};\r\n\t\tMemory.creeps = {};\r\n\t\tMemory.nameClk = 1;\r\n\t}\r\n\r\n\tif (Game.rooms.length === 1) {\r\n\r\n\t}\r\n};","let getFreeSpots = (pos) => {\r\n\tlet { x, y } = pos;\r\n\r\n\tlet freeSpots = 0;\r\n\tfor (let xInd = x-1; xInd <= x+1; xInd++) {\r\n\t\tfor (let yInd = y-1; yInd <= y+1; yInd++) {\r\n\r\n\t\t\tif (xInd !== x || yInd !== y+5) {\r\n\r\n\t\t\t\tlet objs = new RoomPosition(xInd, yInd, pos.roomName).look();\r\n\t\t\t\tlet wallFound = false;\r\n\r\n\t\t\t\tobjs.map( (obj) => {\r\n\t\t\t\t\tif (obj.type === \"terrain\" && obj.terrain === \"wall\") {\r\n\t\t\t\t\t\twallFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!(wallFound)) {\r\n\t\t\t\t\tfreeSpots += 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn freeSpots;\r\n};\r\n\r\nlet setBasic = (room) => {\r\n\troom.memory = {\r\n\t\tsetup: true,\r\n\t\tlevel: room.controller.level,\r\n\t\tparentRoom: null,\r\n\t\tstate: true,\r\n\t\tspawns: [],\r\n\t\tsources: [],\r\n\t};\r\n};\r\n\r\nlet setSpawns = (room) => {\r\n\tlet spawns = room.find(FIND_MY_SPAWNS);\r\n\tspawns.map( (spw) => {\r\n\t\troom.memory.spawns.push(spw.name);\r\n\t\tMemory.spawns[spw.name] = {\r\n\t\t\tx: spw.pos.x,\r\n\t\t\ty: spw.pos.y,\r\n\t\t\tspawnQueue: [],\r\n\t\t\taliveCreeps: [],\r\n\t\t\tautoList: {\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n};\r\n\r\nlet setSources = (room) => {\r\n\tlet sources = room.find(FIND_SOURCES);\r\n\tsources.map( (src, index) => {\r\n\t\troom.memory.sources.push(src.id);\r\n\t\tMemory.sources[src.id] = {\r\n\t\t\tx: src.pos.x,\r\n\t\t\ty: src.pos.y,\r\n\t\t\troom: room.name,\r\n\t\t\tfreeSpots: getFreeSpots(src.pos),\r\n\t\t\tisActive: true,\r\n\t\t\ttarget: room.memory.spawns[0],\r\n\t\t\tspawnPriority: index\r\n\t\t};\r\n\t});\r\n};\r\n\r\nlet shouldSetup = (room) => {\r\n\r\n\tif (!room.memory) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (!room.memory.setup) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (room.memory.level !== room.controller.level) {\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nmodule.exports = (room) => {\r\n\tif ( shouldSetup(room) ) {\r\n\t\tconsole.log(\"Initializing Room Memory...\");\r\n\t\tsetBasic(room);\r\n\t\tsetSpawns(room);\r\n\t\tsetSources(room);\r\n\t}\r\n};\r\n","let initializeRoomMemory = require(\"./initializeRoomMemory\");\r\nlet roomPlanner = require(\"./roomPlanner\");\r\n\r\nmodule.exports = () => {\r\n\tfor (let name in Game.rooms) {\r\n\t\tlet room = Game.rooms[name];\r\n\r\n\t\tinitializeRoomMemory(room);\r\n\t\troomPlanner(room);\r\n\r\n\t}\r\n};\r\n//Every Main Room Needs\r\n//SourceHarvester and SourceCourier\r\n//Upgrader Role\r\n//Worker Role (Build and Repairs)\r\n//Queen (Handles spawning energy)\r\n//King  (Handles main transportation)\r\n//Transporter (Late game courier after links and shit)\r\n\r\n//Room Planner\r\n//Build Structures Based on RCL\r\n//One at a time\r\n//\r\n//Rebuild Missing Structures\r\n\r\n//Colony\r\n//Run Towers, Roles, Groups\r\n\r\n//Overseer\r\n//Check Room Enemies ( Main and Tendrils)\r\n//Check Emergency Help\r\n//Handle Safe Mode\r\n\r\n//Groups\r\n//Miners\r\n//Harvs\r\n//Upgraders\r\n//Requesting energy for links, calcing power needed, finding battery\r\n//Hatchery\r\n//Handle hatchery logistics and spawning of creeps\r\n\r\n//Groups Module\r\n//Init/Spawn\r\n//Check if we need to spawn\r\n//Roles\r\n//Miner\r\n//Harvester\r\n//\r\n//Upgrade\r\n//Upgrading, withdrawing, and repairing shit\r\n//Hatch Queen\r\n//Handle Energy Movement\r\n\r\n//Role Module\r\n//Init / Spawn\r\n//If we need more power, make another creep\r\n//Run\r\n//If ValidTask & ValidTarget) Work\r\n//Else Get new Task\r\n//LifeTime Filter\r\n//3*bodylength + spawnDistance\r\n//RequestCreep\r\n//Wishilist\r\n\r\n\r\n//Actions\r\n//Harvest\r\n//Withdraw\r\n//Upgrade\r\n\r\n//Action Module\r\n//IsValid\r\n//ValidTask\r\n//ValidTarget\r\n//Valid Room\r\n//Run\r\n//If in range, work\r\n//OTherwise goto\r\n\r\n\r\n//Action.js\r\n\r\n//Creep\r\n//Set Task\r\n//\r\n//Directives\r\n//New Way would be to say like\r\n//Overall\r\n//Rooms\r\n//Tendrils\r\n//Creep\r\n\r\n\r\n//Key problem is thing these we want to do, we should not wait to add them to the list\r\n//We should just add them at a lower priority\r\n\r\n\r\n//Priority Sorting Example-\r\n/*\r\nOverlord Setups Pros\r\n\tAllows us to use overlords based on priority\r\n\r\nSource Active\r\n\tSpawns / Tracks Harvesters and Couriers\r\nSource Inactive\r\n\tShow usage cost\r\nFull Room\r\n\tTracks Energy Output\r\n\tOn RCL Levelup, Increase Construction Tracker\r\n\tTrack Construction\r\nController\r\n\tDecisions\r\n\t\tNew Room? Non-claim, claim, or owned\r\n\t\tConstruction\r\n*/","let getCreepCost = (creep) => {\r\n\tlet cost = 0;\r\n\tcreep.body.map( part => cost += BODYPART_COST[part] );\r\n\treturn cost;\r\n};\r\n\r\nlet spawnCreep = (spawn, creep) => {\r\n\r\n\tMemory.nameClk += 1;\r\n\tlet name = creep.memory.role + Memory.nameClk;\r\n\r\n\tlet {body, memory} = creep;\r\n\r\n\tconsole.log(\"Created creep:\", body, \"with name\", name);\r\n\tlet res = spawn.spawnCreep(body, name, {memory});\r\n\r\n\tif (res === 0) {\r\n\t\tconsole.log(\"Spawning Worked!!\");\r\n\t\tspawn.memory.spawnQueue.shift();\r\n\t\tspawn.memory.aliveCreeps.push({\r\n\t\t\t...creep,\r\n\t\t\tname\r\n\t\t});\r\n\r\n\t} else {\r\n\t\tconsole.log(\"Spawning Failed: \", res);\r\n\t\tMemory.nameClk -= 1;\r\n\r\n\t}\r\n};\r\nexports.run = (spawn) => {\r\n\r\n\tlet isSpawning = !spawn.spawning;\r\n\tlet hasCreepToSpawn = spawn.memory.spawnQueue.length > 0;\r\n\r\n\tif (isSpawning && hasCreepToSpawn) {\r\n\t\tlet creep = spawn.memory.spawnQueue[0];\r\n\r\n\t\tlet room = spawn.room;\r\n\t\tlet maxEnergy = room.energyCapacityAvailable;\r\n\t\tlet currEnergy = room.energyAvailable;\r\n\t\tlet nextCreepCost = getCreepCost( creep );\r\n\r\n\t\tlet canSpawnFirstCreep = nextCreepCost < currEnergy;\r\n\r\n\t\tif ( canSpawnFirstCreep ) {\r\n\r\n\t\t\tspawnCreep(spawn, creep);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexports.add = (spawn, creep) => {\r\n\tconsole.log(\"Adding Creep to spawnQueue\", spawn);\r\n\r\n\tspawn.memory.spawnQueue.push(creep);\r\n};\r\n\r\n\r\n//The key is generated when\r\n//Whenever we actually add soemthing to\r\n//We need to make a respawn strategy","let compare = (param1, param2) => {\r\n\tif (typeof param1 !== typeof param2) {\r\n\t\treturn false;\r\n\t}\r\n\tif (typeof param1 === \"object\") {\r\n\t\tif (Array.isArray(param1)) {\r\n\t\t\tif (Array.isArray(param2)) {\r\n\t\t\t    return compareArrays(param1, param2);\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn compareObjects(param1, param2);\r\n\t}\r\n\treturn param1 === param2;\r\n};\r\n\r\nlet compareArrays = (arr1, arr2) => {\r\n\tlet ret = true;\r\n\tarr1.forEach( (item1, index) => {\r\n\t\tlet item2 = arr2[index];\r\n\r\n\t\tif ( !compare(item1, item2) ) {\r\n\t\t    ret = false;\r\n\t\t}\r\n\t});\r\n\tif (arr1.length !== arr2.length ) {\r\n\t\treturn false;\r\n\t}\r\n\treturn ret;\r\n};\r\n\r\nlet compareObjects = (obj1, obj2) => {\r\n\tfor (let key in obj1) {\r\n\t\tif (!(key in obj2)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif ( !compare(obj1[key], obj2[key]) ) {\r\n\t\t    return false;\r\n\t\t}\r\n\t}\r\n\tfor (let key in obj2) {\r\n\t    if (!(key in obj1)) {\r\n\t        return false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nmodule.exports = compare;","let addToQueue = require(\"./spawnQueue\").add;\r\n\r\nexports.get = (spawn) => {\r\n\r\n};\r\nexports.run = (spawn) => {\r\n\r\n\tspawn.memory.aliveCreeps.map( (creep, index) => {\r\n\t\tif (!creep) {\r\n\t\t\tspawn.memory.aliveCreeps.splice(index);\r\n\t\t} else {\r\n\r\n\t\t\tlet { name, alreadyRespawning } = creep;\r\n\t\t\tlet Dead = !(name in Game.creeps);\r\n\t\t\tlet AboutToDie = false; //!Dead || Game.creeps[name].ticksToLive < 1400;\r\n\r\n\t\t\tif ( Dead || AboutToDie && alreadyRespawning === undefined) {\r\n\t\t\t\tconsole.log(\"Creep:\", name, \" respawn started\");\r\n\t\t\t\taddToQueue(spawn, { ...creep});\r\n\t\t\t\tspawn.memory.aliveCreeps[index].alreadyRespawning = true;\r\n\r\n\t\t\t\tif ( Dead ) spawn.memory.aliveCreeps.splice(index);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n};\r\n\r\nlet compare = require(\"../Helpers/deepCompare\");\r\n\r\nexports.update = (spawn, id, creeps) => {\r\n\r\n\tif ( !compare(spawn.memory.autoList[id], creeps) ) {\r\n\t\tconsole.log(\"Updating Auto Creeps\", id);\r\n\r\n\t\tif (id in spawn.memory.autoList) {\r\n\t\t\t//Remove any entries in autolist from this spawns spawnQueue\r\n\t\t}\r\n\t\tcreeps.map( (creep, index) => {\r\n\t\t\tlet key = id + \":\" + index;\r\n\t\t\taddToQueue(spawn, { ...creep, key });\r\n\t\t});\r\n\t\t//Send all in autoList to spawnQueue\r\n\t\tspawn.memory.autoList[id] = creeps;\r\n\t}\r\n};\r\n","let updateAutoSpawner = require(\"../Spawning/autoRoster\").update;\r\n\r\n\r\nlet run = function() {\r\n\tthis.addHarvester();\r\n\tthis.handleCouriers();\r\n\t/*\r\n\t\tThis might eventually become a core part of our early game strategy in the future\r\n\tif (this.rcl && this.freeSpots > 1) {\r\n\t\tthis.addHarvester();\r\n\t\tthis.handleCouriers();\r\n\t}\r\n\t*/\r\n\tthis.update();\r\n};\r\n\r\n//At 4 Work parts we reach 8e/t , problem is an addition 1/1 would need carry parts,, but it could easily make its target up in about 100 Ticks,\r\n\t//Might not be neccesary\r\n//If we already have a harvester, we need to give it another spot to stand1\r\n//Any harvester past the first doesnt care about where he is dropping it,\r\n\t//If we dont give a harvester a drop position, then he just gets in range\r\n\t//If we dont give a courier a drop position, then it just searches for dropped energy near source\r\n//\r\nlet addHarvester = function() {\r\n\tlet path = this.source.pos.findPathTo(this.spawn.pos, { range: 1, ignoreCreeps: true});\r\n\tthis.dropPos = {\r\n\t\tx: path[0].x,\r\n\t\ty: path[0].y,\r\n\t\troomName: this.source.room.name\r\n\t};\r\n\tthis.source.memory.dropPos = this.dropPos;\r\n\tthis.creeps.push( genHarvester(this.source, this.dropPos) );\r\n};\r\n\r\nlet handleCouriers = function() {\r\n\t//We need to get the distance required, this will keep constant no matter change in harvesters\r\n\t//We need to establish some things first\r\n\t//DropPos / Path needs to be made at start, im thinkin we just place the source in relation to the spawn, until further changes\r\n\t//From here, calculate our extra energy per tick and add our leftover or overage over\r\n\t//\r\n\tthis.storage = this.spawn;\r\n\r\n\tlet path = this.source.pos.findPathTo(this.storage.pos, { range: 1, ignoreCreeps: true});\r\n\tlet distance = path.length;\r\n\r\n\tlet currentWorkParts = 0;\r\n\tlet currentCarryParts = 0;\r\n\tthis.creeps.map( (creep) => {\r\n\t\tcreep.body.map( (part) => {\r\n\t\t\tswitch(part) {\r\n\t\t\t\tcase WORK:\r\n\t\t\t\t\tcurrentWorkParts += 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CARRY:\r\n\t\t\t\t\tcurrentCarryParts += 1;\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\tlet energyPerTick = currentWorkParts * 2; //Work Parts\t//Carry Parts\r\n\tlet carryPartsNeeded = energyPerTick * (distance * 2)/50;\r\n\tcarryPartsNeeded -= currentCarryParts;\r\n\r\n\twhile ( carryPartsNeeded > .1 ) {\r\n\t\tthis.creeps.push( genCourier(1, this.source, this.storage, this.dropPos) );\r\n\t\tcarryPartsNeeded -= 1;\r\n\t}\r\n};\r\n\r\nlet update = function() {\r\n\tupdateAutoSpawner(this.spawn, this.source.id, this.creeps);\r\n};\r\n\r\nlet updateSource = (source, spawn) => {\r\n\treturn {\r\n\t\tsource,\r\n\t\tspawn,\r\n\t\tstorage: null,\r\n\t\trcl: source.room.controller.level,\r\n\t\tfreeSpots: source.memory.freeSpots,\r\n\t\tcreeps: [],\r\n\t\trun,\r\n\t\tupdate,\r\n\t\taddHarvester,\r\n\t\thandleCouriers\r\n\t};\r\n};\r\n\r\nlet genHarvester = (source, dropPos) => {\r\n\treturn {\r\n\t\tpriority: 1 + source.memory.spawnPriority,\r\n\t\tmemory: {\r\n\t\t\trole: \"harvester\",\r\n\t\t\troom: source.room.name,\r\n\t\t\ttarget: source.id,\r\n\t\t\tdropPos: dropPos\r\n\t\t},\r\n\t\tbody: [WORK, WORK, MOVE]\r\n\t};\r\n};\r\n\r\nlet genCourier = (carryParts, source, target, dropPos, hasRoad=false) => {\r\n\t//At lower RCLs we use less carry Parts, might not even fill it\r\n\treturn {\r\n\t\tpriority: 1 + source.memory.spawnPriority,\r\n\t\tmemory: {\r\n\t\t\trole: \"courier\",\r\n\t\t\troom: source.room.name,\r\n\t\t\tsource: source.id,\r\n\t\t\ttargetWithdraw: dropPos,\r\n\t\t\ttargetTransfer: target.id\r\n\t\t},\r\n\t\tbody: [CARRY, MOVE]\r\n\t};\r\n};\r\n\r\n\r\nmodule.exports = (spawn) => {\r\n\tlet sources = spawn.room.memory.sources;\r\n\tsources.map( (sourceId) => {\r\n\r\n\t\tlet source = Game.getObjectById(sourceId);\r\n\t\tlet sourceUpdater = updateSource(source, spawn);\r\n\t\tsourceUpdater.run();\r\n\t});\r\n};\r\n\r\n/*\r\n let energyPerCarryPart = energyPerTick / carryPartsNeeded;\r\n let overCarry = carryPartsNeeded % 1;\r\n let wastagePerTick =  overCarry*energyPerCarryPart;\r\n let extraCarryCost = 100;\r\n let wastage = wastagePerTick*1500 / extraCarryCost; // ExtraCarryPartBonus / Cost\r\n //console.log(\"Waste:\", wastage);\r\n //If no road, then each extra carryPart costs 100 energy, but otherwise, it costs 50 to 100 depending on num parts\r\n\r\n */","/*\r\n\tOnly really want one spy per spawn cluster,  though we might want to creep a new spy for incubating rooms\r\n */\r\n\r\nlet { update } = require(\"../Spawning/autoRoster\");\r\n\r\nmodule.exports = (spawn) => {\r\n\tlet id = spawn.id + \":spy\";\r\n\tlet creeps = [ genSpy() ];\r\n    \r\n\tupdate(spawn, id, creeps);\r\n};\r\n\r\nlet genSpy = () => {\r\n\treturn {\r\n\t\tpriority: 4,\r\n\t\tmemory: {\r\n\t\t\trole: \"spy\"\r\n\t\t},\r\n\t\tbody: [MOVE]\r\n\t};\r\n};","let updateSources = require(\"./updateSources\");\r\nlet updateUpgraders = require(\"./updateUpgraders\");\r\nlet updateBuilders = require(\"./updateBuilders\");\r\nlet updateSpies = require(\"./updateSpies\");\r\n\r\nmodule.exports = (spawn) => {\r\n\tupdateSources(spawn);\r\n\tupdateUpgraders(spawn);\r\n\tupdateBuilders(spawn);\r\n\tupdateSpies(spawn);\r\n};","let runSpawnQueue = require(\"./spawnQueue\").run;\r\nlet runAutoList = require(\"./autoRoster\").run;\r\nlet updateCreepRoster = require(\"../Controller/updateCreepRoster\");\r\n\r\nlet spawnChanged = (spawn) => {\r\n\tif (spawn.energyCapacity !== spawn.memory.energyCapacity) {\r\n\t\tspawn.memory.energyCapacity = spawn.energyCapacity;\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nmodule.exports = () => {\r\n\tfor (let name in Game.spawns) {\r\n\t\tlet spawn = Game.spawns[name];\r\n\r\n\t\tif (spawnChanged(spawn)) {  //We can temporarily downgrade a spawn when we are in\r\n\t\t\tconsole.log(\"Spawned Changed : Updating Creep Roster\");\r\n\t\t\tupdateCreepRoster(spawn);\r\n\t\t}\r\n\r\n\t\trunAutoList( spawn );\r\n\t\trunSpawnQueue( spawn );\r\n\r\n\t}\r\n};\r\n\r\n/*\r\n    Spawn Memory\r\n    ---------------\r\n        spawnQueue: [{creep}],\r\n        aliveCreeps: [{creep}],\r\n        autoList: {\r\n            id: [{creep}]\r\n        }\r\n\r\n        autoList = {\r\n            memory,\r\n            body,\r\n            priority\r\n        },\r\n        spawnQueue = {\r\n            ...autoList,\r\n            key = id + role + index\r\n        },\r\n        aliveCreeps = {\r\n            ...spawnQueue,\r\n            id = creepId\r\n        }\r\n        //We use key to replace creeps\r\n */","let checkTaskArr = {\r\n\t\"harvest\" (creep, target) {\r\n\t\treturn target.energy > 0;\r\n\t},\r\n\t\"pickup\" (creep, target) {\r\n\t\tlet creepNotFull = creep.carry.energy < creep.carryCapacity;\r\n\t\tlet targetNotEmpty = target && target.amount > 0; //target.amount > 0;\r\n\t\treturn creepNotFull && targetNotEmpty;\r\n\t},\r\n\t\"transfer\": (creep, target) => {\r\n\t\tlet creepNotEmpty = creep.carry.energy > 0;\r\n\t\tlet targetNotFull = target.currEnergy() < target.maxEnergy();\r\n\t\treturn creepNotEmpty && targetNotFull;\r\n\t},\r\n\t\"withdraw\": (creep, target) => {\r\n\t\treturn true;\r\n\t},\r\n\t\"idle\": (creep, target) => {\r\n\t\treturn creep.memory.idleTicks > 0;\r\n\t}\r\n};\r\n\r\nmodule.exports = (creep, target) => {\r\n\tlet func = checkTaskArr[creep.memory.taskName];\r\n\treturn func(creep, target);\r\n};","let nextTo = (pos1, pos2) => {\r\n\tif ( pos1.room !== pos2.room ) {\r\n\t\treturn 100;\r\n\t} else {\r\n\t\tlet xNear = Math.abs(pos1.x - pos2.x);\r\n\t\tlet yNear = Math.abs(pos1.y - pos2.y);\r\n\t\treturn Math.max(xNear, yNear);\r\n\t}\r\n};\r\n\r\nlet getPos = (obj) => {\r\n\tif (\"x\" in obj) {\r\n\t\treturn obj;\r\n\t} else {\r\n\t\treturn obj.pos;\r\n\t}\r\n};\r\n\r\nexports.nextTo = (obj1, obj2) => {\r\n\tif (obj1 === null || obj2 === null) return 0;\r\n\tlet pos1 = getPos(obj1);\r\n\tlet pos2 = getPos(obj2);\r\n\treturn nextTo(pos1, pos2);\r\n};","let { nextTo } = require(\"../Helpers/navigation\");\r\n\r\nlet getTask = {\r\n\t\"build\": (creep, target) => {\r\n\t\tcreep.build(target);\r\n\t},\r\n\t\"claimController\": (creep, target) => {\r\n\t\tcreep.claimController(target);\r\n\t},\r\n\t\"harvest\": (creep, target) => {\r\n\t\tcreep.harvest(target);\r\n\t},\r\n\t\"moveTo\": (creep, target) => {\r\n\t\tcreep.moveTo(target);\r\n\t},\r\n\t\"pickup\": (creep, target) => {\r\n\t\tcreep.pickup(target);\r\n\t},\r\n\t\"reserveController\": (creep, target) => {\r\n\t\tcreep.reserveController(target);\r\n\t},\r\n\t\"transfer\": (creep, target) => {\r\n\t\tcreep.transfer(target, RESOURCE_ENERGY);\r\n\t},\r\n\t\"withdraw\": (creep, target) => {\r\n\t\tcreep.withdraw(target);\r\n\t},\r\n\t\"upgradeController\": (creep, target) => {\r\n\t\tcreep.upgradeController(target);\r\n\t},\r\n\t\"idle\": (creep, ticks) => {\r\n\t\tcreep.memory.idleTicks -= 1;\r\n\t}\r\n};\r\n\r\nmodule.exports = (creep, target) => {\r\n\tlet { taskName, taskOptions, taskInRange, taskPos, taskRange } = creep.memory;\r\n\r\n\tif (taskPos === null || taskPos === undefined) {\r\n\t\ttaskPos = target;\r\n\t} else {\r\n\t\ttaskPos = new RoomPosition(taskPos.x, taskPos.y, taskPos.roomName);\r\n\t}\r\n\r\n\tlet res;\r\n\tif (nextTo(creep, taskPos) <= taskRange ) {\r\n\t\tres = getTask[taskName](creep, target, taskOptions);\r\n\t} else {\r\n\t\tres = creep.travelTo(taskPos, {\r\n\t\t\trange: taskRange\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/*\r\n switch (token) {\r\n case OK:\r\n break;\r\n case ERR_NOT_OWNER: //Should never happen\r\n break;\r\n case ERR_NO_PATH: //Creep Probably blocking, might want to abandon task though\r\n break;\r\n case ERR_NAME_EXISTS: //Creating Flag or Spawning Creep\r\n break;\r\n case ERR_BUSY: //Being Spawned, or Trying to Delete something with hostile creeps in room\r\n break;\r\n case ERR_NOT_FOUND:  //No Extractor, not in path, or cant cancel order\r\n break;\r\n case ERR_NOT_ENOUGH_RESOURCES: //Source/Container is empty, or creep is empty\r\n break;\r\n case ERR_INVALID_TARGET: //Should reTask creep\r\n break;\r\n case ERR_FULL: //\r\n break;\r\n case ERR_NOT_IN_RANGE:  //Need to move obviously\r\n break;\r\n case ERR_INVALID_ARGS:\r\n break;\r\n case ERR_TIRED: //Wait til next turn\r\n break;\r\n case ERR_NO_BODYPART:\r\n break;\r\n case ERR_RCL_NOT_ENOUGH:\r\n break;\r\n case ERR_GCL_NOT_ENOUGH:\r\n break;\r\n }\r\n */","module.exports = (creep, task, target, options) => {\r\n\toptions = {\r\n\t\t...defaultOptions,\r\n\t\t...options\r\n\t};\r\n\tcreep.memory = {\r\n\t\t...creep.memory,\r\n\t\ttaskName: task,\r\n\t\ttaskTarget: target,\r\n\t\ttaskPos: options.pos,\r\n\t\ttaskRange: options.range,\r\n\t\ttaskInRange: false\r\n\t};\r\n};\r\n\r\nlet defaultOptions = {\r\n\trange: 1,\r\n\tpos: null\r\n};","let setTask = require(\"../Creeps/setTask\");\r\n\r\nmodule.exports = (creep) => {\r\n\tsetTask(creep, \"harvest\", creep.memory.target, {\r\n\t\tpos: creep.memory.dropPos,\r\n\t\trange: 0\r\n\t});\r\n\r\n};","let setTask = require(\"../Creeps/setTask\");\r\n\r\nlet findEnergyStorage = (creep) => {\r\n\treturn Game.spawns.Spawn1.id;\r\n};\r\n\r\nlet withdraw = (creep) => {\r\n\tlet { x, y, roomName } = creep.memory.targetWithdraw;\r\n\tlet target = new RoomPosition(x, y, roomName);\r\n\r\n\tlet objects = target.look();\r\n\r\n\tlet container = _.find(objects, obj => obj.type === \"structure\");\r\n\tlet energy = _.find(objects, obj => obj.type === \"energy\" && obj.energy.resourceType === \"energy\");\r\n\r\n\r\n\tif (container) {\r\n\t\tsetTask(creep, \"pickup\", container.id);\r\n\t} else if (energy) {\r\n\t\tsetTask(creep, \"pickup\", energy.energy.id);\r\n\t} else {\r\n\t\tcreep.memory.idleTicks = 1;\r\n\t\tsetTask(creep, \"idle\", null);\r\n\t}\r\n\r\n};\r\n\r\nlet transfer = (creep) => {\r\n\tlet target = findEnergyStorage(creep);\r\n\r\n\tif (target !== null) {\r\n\t\tsetTask(creep, \"transfer\", target);\r\n\t} else {\r\n\r\n\t\tif (creep.carry.energy / creep.carryCapacity > .75 ) {\r\n\t\t\tsetTask(creep, \"idle\", 1);\r\n\r\n\t\t} else {\r\n\t\t\twithdraw(creep);\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\nmodule.exports = (creep) => {\r\n\tlet hasEnergy = creep.carry.energy > 0;\r\n\r\n\tif (hasEnergy) {\r\n\t\ttransfer(creep);\r\n\t} else {\r\n\t\twithdraw(creep);\r\n\t}\r\n};\r\n\r\n//Could transfer to a router type system\r\n\r\n//We set the creep object to the current creep in loop, and then run it'","let harvesterRun \t= require(\"../Roles/harvesterRun\");\r\nlet spyRun \t\t\t= require(\"../Roles/spyRun\");\r\nlet courierRun\t\t= require(\"../Roles/courierRun\");\r\n\r\nmodule.exports = (creep) => {\r\n\tswitch (creep.memory.role) {\r\n\t\tcase \"harvester\":  \tharvesterRun(creep); \tbreak;\r\n\t\tcase \"spy\":\t\t\tspyRun(creep);\t\t\tbreak;\r\n\t\tcase \"courier\": \tcourierRun(creep);\t\tbreak;\r\n\t}\r\n};","let checkTask = require(\"./checkTask\");\r\nlet runTask = require(\"./runTask\");\r\nlet getNewTask = require(\"./getNewTask\");\r\n\r\nlet getTarget = (creep) => {\r\n\tlet target = creep.memory.taskTarget;\r\n\tif (target === null) return null;\r\n\tif (target === undefined) return null;\r\n\telse if (typeof target === \"object\") {\r\n\t\tlet { x, y, roomName } = target;\r\n\t\treturn new RoomPosition(x, y, roomName);\r\n\t} else {\r\n\t\treturn Game.getObjectById(target);\r\n\t}\r\n};\r\n\r\nmodule.exports = () => {\r\n\tfor (let id in Game.creeps) {\r\n\t\tlet creep = Game.creeps[id];\r\n\r\n\t\tlet hasTask =  creep.memory.taskName;\r\n\r\n\t\tlet target;\r\n\t\tlet taskValid;\r\n\r\n\t\tif (hasTask) {\r\n\t\t\ttarget = getTarget(creep);\r\n\t\t\ttaskValid = checkTask(creep, target);\r\n\t\t\tif (!taskValid) {\r\n\t\t\t\tgetNewTask(creep);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tgetNewTask(creep);\r\n\t\t\ttarget = getTarget(creep);\r\n\t\t}\r\n\r\n\t\trunTask(creep, target);\r\n\r\n\r\n\t}\r\n};\r\n\r\n//Role decides what function to run when deciding what to do\r\n//Task decides what creep is currently doing,","module.exports = () => {\r\n\tfor (let name in Game.rooms) {\r\n\t    let room = Game.rooms[name];\r\n\r\n\t\tlet towers = room.find(FIND_STRUCTURES, {\r\n\t\t\tfilter: (struct) => (\r\n\t\t\t\tstruct.structureType === STRUCTURE_TOWER\r\n\t\t\t)\r\n\t\t});\r\n\t}\r\n};","\r\nlet func1 = function(param) {\r\n\tconsole.log(param);\r\n};\r\nlet run = function() {\r\n\tthis.func1(this.var1);\r\n};\r\nlet getCreep = (creep) => {\r\n\treturn {\r\n\t\tvar1: 5,\r\n\t\tfunc1,\r\n\t\trun\r\n\t};\r\n};\r\n\r\nmodule.exports = () => {\r\n\tif (Game.time % 1 === 0) {\r\n\t\tfor (let id in Memory.creeps){\r\n\t\t\tif ( !(id in Game.creeps)) {\r\n\t\t\t\tdelete Memory.creeps[id];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n};\r\n","//setTickRate(50)\r\n//bots.spawn('screeps-bot-tooangel', ROOMNAME)\r\n//screeps-bot-hivemind\r\n\r\n\"use strict\";\r\n\r\nrequire(\"./Prototypes/index\");\r\nrequire(\"./Traveler\");\r\n\r\nlet modules = [\r\n\t//Initialize memory variables on server restnpm\r\n\trequire(\"./Helpers/Memory\"),\r\n\r\n\t//Initialize Room and Source Roles / Structures\r\n\t//Will be responsible for Adding new structures and missions based off of RCL\r\n\trequire(\"./Controller/roomController\"),\r\n\r\n\t//Handle Spawning and Creation of Rosters for Creeps\r\n\trequire(\"./Spawning/spawnController\"),\r\n\r\n\t//Handles Actual Actions from Creeps\r\n\trequire(\"./Creeps/creepController\"),\r\n\r\n\t//Handle all of our structures, and what actions we want them to take\r\n\trequire(\"./Structures/towerActions\"),\r\n\r\n\t//Currently useless\r\n\trequire(\"./Helpers/cleanup\")\r\n];\r\n\r\nconsole.log(\"[][][] Cache Reset [][][]\");\r\n\r\nmodule.exports.loop = function() {\r\n\r\n\t//console.log(\"===== LOOP START ======\");\r\n\tmodules.map(module => module() );\r\n\r\n};"],"names":["require$$0","compare","run","update","require$$1","nextTo","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7"],"mappings":"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"};