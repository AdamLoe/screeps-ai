module.exports = {"version":3,"file":"main.js","sources":["src/Prototypes/Source.js","src/Prototypes/Generic.js","src/Helpers/Memory.js","src/Controller/initializeRoomMemory.js","src/Controller/roomController.js","src/Spawning/spawnQueue.js","src/Spawning/spawnAutoList.js","src/Roles/harvesterSetup.js","src/Controller/sourceController.js","src/Spawning/spawnController.js","src/Actions/Roles/Courier.js","src/Actions/Roles/Harvester.js","src/Actions/runCreeps.js","src/Structures/towerActions.js","src/Helpers/cleanup.js","src/main.js"],"sourcesContent":["Object.defineProperty(Source.prototype, \"memory\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id];\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Source.prototype, \"harvesters\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id].harvesters.map( creepId => Game.creeps[creepId] );\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperty(Source.prototype, \"couriers\", {\r\n\tget: function() {\r\n\t\treturn Memory.sources[this.id].couriers.map( creepId => Game.creeps[creepId] );\r\n\t},\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n\r\nmodule.exports = () => {};\r\n\r\n","Object.compare = function (obj1, obj2) {\r\n\t//Loop through properties in object 1\r\n\tfor (let p in obj1) {\r\n\t\t//Check property exists on both objects\r\n\t\tif (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n\t\tswitch (typeof (obj1[p])) {\r\n\t\t\t//Deep compare objects\r\n\t\t\tcase \"object\":\r\n\t\t\t\tif (!Object.compare(obj1[p], obj2[p])) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//Compare function code\r\n\t\t\tcase \"function\":\r\n\t\t\t\tif (typeof (obj2[p]) === \"undefined\" || (p !== \"compare\" && obj1[p].toString() !== obj2[p].toString())) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t\t//Compare values\r\n\t\t\tdefault:\r\n\t\t\t\tif (obj1[p] !== obj2[p]) return false;\r\n\t\t}\r\n\t}\r\n\r\n\t//Check object 2 for any extra properties\r\n\tfor (let p in obj2) {\r\n\t\tif (typeof (obj1[p]) === \"undefined\") return false;\r\n\t}\r\n\treturn true;\r\n};","let justReset = () => {\r\n\tif (_.size(Game.rooms) === 1) {\r\n\t\tif (_.find(Game.rooms).controller.level === 1) {\r\n\t\t\tif (_.size(Game.creeps) === 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nmodule.exports = () => {\r\n\r\n\tMemory.sources = Memory.sources || {};\r\n\tMemory.nameClk = Memory.nameClk || 0;\r\n    \r\n\tif ( justReset() ) {\r\n\t\tconsole.log(\"++++++ CLEARING OLD MEMORY ++++++++++\");\r\n\r\n\t\tMemory.rooms = {};\r\n\t\tMemory.spawns = {};\r\n\t\tMemory.sources = {};\r\n\t\tMemory.creeps = {};\r\n\t\tMemory.nameClk = 1;\r\n\t}\r\n\r\n\tif (Game.rooms.length === 1) {\r\n\r\n\t}\r\n};","let getFreeSpots = (pos) => {\r\n\tlet { x, y } = pos;\r\n\r\n\tlet freeSpots = 0;\r\n\tfor (let xInd = x-1; xInd <= x+1; xInd++) {\r\n\t\tfor (let yInd = y-1; yInd <= y+1; yInd++) {\r\n\r\n\t\t\tif (xInd !== x || yInd !== y+5) {\r\n\r\n\t\t\t\tlet objs = new RoomPosition(xInd, yInd, pos.roomName).look();\r\n\t\t\t\tlet wallFound = false;\r\n\r\n\t\t\t\tobjs.map( (obj) => {\r\n\t\t\t\t\tif (obj.type === \"terrain\" && obj.terrain === \"wall\") {\r\n\t\t\t\t\t\twallFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!(wallFound)) {\r\n\t\t\t\t\tfreeSpots += 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn freeSpots;\r\n};\r\n\r\nlet setBasic = (room) => {\r\n\troom.memory = {\r\n\t\tsetup: true,\r\n\t\tlevel: room.controller.level,\r\n\t\tparentRoom: null,\r\n\t\tstate: true,\r\n\t\tspawns: [],\r\n\t\tsources: [],\r\n\t};\r\n};\r\n\r\nlet setSpawns = (room) => {\r\n\tlet spawns = room.find(FIND_MY_SPAWNS);\r\n\tspawns.map( (spw) => {\r\n\t\troom.memory.spawns.push(spw.name);\r\n\t\tMemory.spawns[spw.name] = {\r\n\t\t\tx: spw.pos.x,\r\n\t\t\ty: spw.pos.y,\r\n\t\t\tspawnQueue: [],\r\n\t\t\taliveCreeps: [],\r\n\t\t\tautoList: {\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n};\r\n\r\nlet setSources = (room) => {\r\n\tlet sources = room.find(FIND_SOURCES);\r\n\tsources.map( (src, index) => {\r\n\t\troom.memory.sources.push(src.id);\r\n\t\tMemory.sources[src.id] = {\r\n\t\t\tx: src.pos.x,\r\n\t\t\ty: src.pos.y,\r\n\t\t\troom: room.name,\r\n\t\t\tharvesters: [],\r\n\t\t\tcouriers: [],\r\n\t\t\tfreeSpots: getFreeSpots(src.pos),\r\n\t\t\tisActive: true,\r\n\t\t\ttarget: room.memory.spawns[0],\r\n\t\t\tspawnPriority: index\r\n\t\t};\r\n\t});\r\n};\r\n\r\nlet shouldSetup = (room) => {\r\n\r\n\tif (!room.memory) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (!room.memory.setup) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (room.memory.level !== room.controller.level) {\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nmodule.exports = (room) => {\r\n\tif ( shouldSetup(room) ) {\r\n\t\tconsole.log(\"Initializing Room Memory...\");\r\n\t\tsetBasic(room);\r\n\t\tsetSpawns(room);\r\n\t\tsetSources(room);\r\n\t}\r\n};\r\n","let initializeRoomMemory = require(\"./initializeRoomMemory\");\r\nlet roomPlanner = require(\"./roomPlanner\");\r\n\r\nmodule.exports = () => {\r\n\tfor (let name in Game.rooms) {\r\n\t\tlet room = Game.rooms[name];\r\n\r\n\t\tinitializeRoomMemory(room);\r\n\t\troomPlanner(room);\r\n\r\n\t}\r\n};\r\n//Every Main Room Needs\r\n//SourceHarvester and SourceCourier\r\n//Upgrader Role\r\n//Worker Role (Build and Repairs)\r\n//Queen (Handles spawning energy)\r\n//King  (Handles main transportation)\r\n//Transporter (Late game courier after links and shit)\r\n\r\n//Room Planner\r\n//Build Structures Based on RCL\r\n//One at a time\r\n//\r\n//Rebuild Missing Structures\r\n\r\n//Colony\r\n//Run Towers, Roles, Groups\r\n\r\n//Overseer\r\n//Check Room Enemies ( Main and Tendrils)\r\n//Check Emergency Help\r\n//Handle Safe Mode\r\n\r\n//Groups\r\n//Miners\r\n//Harvs\r\n//Upgraders\r\n//Requesting energy for links, calcing power needed, finding battery\r\n//Hatchery\r\n//Handle hatchery logistics and spawning of creeps\r\n\r\n//Groups Module\r\n//Init/Spawn\r\n//Check if we need to spawn\r\n//Roles\r\n//Miner\r\n//Harvester\r\n//\r\n//Upgrade\r\n//Upgrading, withdrawing, and repairing shit\r\n//Hatch Queen\r\n//Handle Energy Movement\r\n\r\n//Role Module\r\n//Init / Spawn\r\n//If we need more power, make another creep\r\n//Run\r\n//If ValidTask & ValidTarget) Work\r\n//Else Get new Task\r\n//LifeTime Filter\r\n//3*bodylength + spawnDistance\r\n//RequestCreep\r\n//Wishilist\r\n\r\n\r\n//Actions\r\n//Harvest\r\n//Withdraw\r\n//Upgrade\r\n\r\n//Action Module\r\n//IsValid\r\n//ValidTask\r\n//ValidTarget\r\n//Valid Room\r\n//Run\r\n//If in range, work\r\n//OTherwise goto\r\n\r\n\r\n//Action.js\r\n\r\n//Creep\r\n//Set Task\r\n//\r\n//Directives\r\n//New Way would be to say like\r\n//Overall\r\n//Rooms\r\n//Tendrils\r\n//Creep\r\n\r\n\r\n//Key problem is thing these we want to do, we should not wait to add them to the list\r\n//We should just add them at a lower priority\r\n\r\n\r\n//Priority Sorting Example-\r\n/*\r\nOverlord Setups Pros\r\n\tAllows us to use overlords based on priority\r\n\r\nSource Active\r\n\tSpawns / Tracks Harvesters and Couriers\r\nSource Inactive\r\n\tShow usage cost\r\nFull Room\r\n\tTracks Energy Output\r\n\tOn RCL Levelup, Increase Construction Tracker\r\n\tTrack Construction\r\nController\r\n\tDecisions\r\n\t\tNew Room? Non-claim, claim, or owned\r\n\t\tConstruction\r\n*/","exports.run = (spawn) => {\r\n\r\n\tif (!spawn.spawning) {\r\n\r\n\t\tlet room = spawn.room;\r\n\t\tlet maxEnergy = room.energyCapacityAvailable;\r\n\t\tlet currEnergy = room.energyAvailable;\r\n\t\tconsole.log(spawn.name, \"charging\",  currEnergy + \"/\" + maxEnergy);\r\n\r\n\t\tif (maxEnergy === currEnergy) {\r\n\r\n\t\t\tlet { spawnQueue } = spawn.memory;\r\n\r\n\r\n\t\t\tconsole.log(\"spawnQueue: \", JSON.stringify(spawnQueue));\r\n\t\t\tif ( spawnQueue.length > 0) {\r\n\t\t\t\tlet creep = spawnQueue.shift();\r\n\t\t\t\tlet { body, memory } = creep;\r\n\r\n\t\t\t\tMemory.nameClk += 1;\r\n\t\t\t\tlet name = memory.role + Memory.nameClk;\r\n\r\n\t\t\t\tconsole.log(\"Created creep:\", body, \"with name\", name);\r\n\t\t\t\tlet res = spawn.spawnCreep(body, name, { memory: memory });\r\n\r\n\t\t\t\tif (res === 0) {\r\n\t\t\t\t\tconsole.log(\"Spawning Worked!!\");\r\n\t\t\t\t\tspawn.memory.aliveCreeps.push({\r\n\t\t\t\t\t\t...creep,\r\n\t\t\t\t\t\tcreepName: name\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Spawning Failed: \", res);\r\n\t\t\t\t\tspawnQueue.unshift(creep);\r\n\t\t\t\t\tMemory.nameClk -= 1;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\t\tconsole.log(spawn.name, \"spawning creep\");\r\n\t}\r\n\r\n};\r\n\r\nexports.add = (spawn, creep) => {\r\n\tconsole.log(\"Adding Creep to spawnQueue\", spawn);\r\n\r\n\tspawn.memory.spawnQueue.push(creep);\r\n};","let addToQueue = require(\"./spawnQueue\").add;\r\n\r\n\r\nexports.run = (spawn) => {\r\n\t//Should be keep a list of all current alive creeps\r\n\t//Upon creeps getting close to death or dying, spawn a new one\r\n\r\n\t/*\r\n\tlet string1 = \"Alive Creeps: \";\r\n\tlet string2 = \"Memory Creeps: \";\r\n\r\n\tfor (let name in Game.creeps) string1 += name + \", \";\r\n\tspawn.memory.aliveCreeps.map( creep => string2 += creep.creepName + \", \");\r\n\tconsole.log(string1);\r\n\tconsole.log(string2);\r\n\t*/\r\n\r\n\tspawn.memory.aliveCreeps.map( ({\r\n\t\tmemory,\r\n\t\tbody,\r\n\t\tpriority,\r\n\t\tcreepName,\r\n\t\tkey,\r\n\t\talreadyRespawning\r\n\t}, index) => {\r\n\r\n\t\tlet Dead = !(creepName in Game.creeps);\r\n\t\tlet AboutToDie = false;//Game.creeps[creepName].ticksToLive < 100;\r\n\r\n\t\tif ( Dead || AboutToDie && !alreadyRespawning) {\r\n\t\t\taddToQueue(spawn, { memory, body, priority, key });\r\n\r\n\t\t\tif ( Dead ) {\r\n\t\t\t\tspawn.memory.aliveCreeps.splice(index);\r\n\t\t\t} else {\r\n\t\t\t\tspawn.memory.aliveCreeps[index].alreadyRespawning = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n};\r\n\r\n\r\nexports.update = (spawnName, id, creeps) => {\r\n\tlet spawn = Game.spawns[spawnName];\r\n\r\n\tif ( JSON.stringify(spawn.memory.autoList[id]) !== JSON.stringify(creeps) ) {\r\n\t\tconsole.log(\"Updating Auto Creeps\", id);\r\n\r\n\t\tif (id in spawn.memory.autoList) {\r\n\t\t\t//Remove any entries in autolist from this spawns spawnQueue\r\n\t\t}\r\n\t\tcreeps.map( creep => addToQueue(spawn, creep) );\r\n\t\t//Send all in autoList to spawnQueue\r\n\t\tspawn.memory.autoList[id] = creeps;\r\n\t}\r\n};\r\n","let updateAutoSpawner = require(\"../Spawning/spawnAutoList\").update;\r\n\r\nmodule.exports = (source) => {\r\n\r\n\r\n\tlet rcl = source.room.controller.level;\r\n\tlet freeSpots = source.memory.freeSpots;\r\n\r\n\tlet creeps = [ genHarvester(source)];\r\n\tif (freeSpots > 1) {\r\n\t\tcreeps += [ genHarvester(source)];\r\n\t}\r\n\r\n\tlet spawnName = source.room.memory.spawns[0];\r\n\r\n\tupdateAutoSpawner(spawnName, source.id, creeps);\r\n};\r\n\r\n\r\nlet genHarvester = (source) => {\r\n\treturn {\r\n\t\tpriority: 1 + source.memory.spawnPriority,\r\n\t\tmemory: {\r\n\t\t\trole: \"harvester\",\r\n\t\t\troom: source.room.name,\r\n\t\t\ttarget: source.id\r\n\t\t},\r\n\t\tbody: [WORK, WORK, MOVE]\r\n\t};\r\n};","let handleEnergyUsage = (source) => {\r\n\tlet storage = source.room.find(FIND_MY_SPAWNS)[0];\r\n\r\n\tlet numWorkParts = 0;\r\n\tsource.harvesters.map( (creep) => {\r\n\t\tcreep.body.map( (part) => {\r\n\t\t\tif (part === WORK) {\r\n\t\t\t\tnumWorkParts += 1;\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\tlet numCarryParts = 0;\r\n\tsource.couriers.map( (creep) => {\r\n\t\tcreep.body.map( (part) => {\r\n\t\t\tif (part === WORK) {\r\n\t\t\t\tnumCarryParts += 1;\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tlet distance = source.pos.findPathTo(storage, { range: 1, ignoreCreeps: true}).length;\r\n\r\n\tMemory.sources[source.id].harvestEPT = numWorkParts * 2;\r\n\tMemory.sources[source.id].courierEPT = numCarryParts * 50 / (distance * 2);\r\n\tMemory.sources[source.id].sourceEPT = source.energyCapacity / 300;\r\n};\r\n\r\nlet setupHarvesters = require(\"../Roles/harvesterSetup\");\r\nlet setupCouriers = require(\"../Roles/courierRun\");\r\n\r\nmodule.exports = () => {\r\n\tfor (let sourceId in Memory.sources) {\r\n\t\tlet { isActive } = Memory.sources[sourceId];\r\n\t\tif (isActive) {\r\n\r\n\t\t\tlet source = Game.getObjectById(sourceId);\r\n\r\n\t\t\thandleEnergyUsage(source);\r\n\t\t\tconsole.log(\"harv:\", source.memory.harvestEPT, \"| cour:\", source.memory.courierEPT, \"| source:\", source.memory.sourceEPT);\r\n\t\t\tsetupHarvesters(source);\r\n\t\t\tsetupCouriers(source);\r\n\t\t}\r\n\t}\r\n};\r\n","let runSpawnQueue = require(\"./spawnQueue\").run;\r\nlet runAutoList = require(\"./spawnAutoList\").run;\r\n\r\nmodule.exports = () => {\r\n\tfor (let name in Game.spawns) {\r\n\t\tlet spawn = Game.spawns[name];\r\n\r\n\t\trunAutoList( spawn );\r\n\t\trunSpawnQueue( Game.spawns[name] );\r\n\t}\r\n};\r\n\r\n/*\r\n    Spawn Memory\r\n    ---------------\r\n        spawnQueue: [{creep}],\r\n        aliveCreeps: [{creep}],\r\n        autoList: {\r\n            id: [{creep}]\r\n        }\r\n\r\n        autoList = {\r\n            memory,\r\n            body,\r\n            priority\r\n        },\r\n        spawnQueue = {\r\n            ...autoList,\r\n            key = id + role + index\r\n        },\r\n        aliveCreeps = {\r\n            ...spawnQueue,\r\n            id = creepId\r\n        }\r\n        //We use key to replace creeps\r\n */","module.exports = (creep) => {\r\n\tlet droppedEnergy = room.find(FIND_DROPPED_ENERGY);\r\n\tlet droppedResources = room.find(FIND_DROPPED_RESOURCES);\r\n\r\n\tlet readyContainers = room.find(FIND_MY_STRUCTURES, {\r\n\t\tfilter: (struct) => (\r\n\t\t\tstruct.structureType === STRUCTURE_CONTAINER &&\r\n            struct.store.RESOURCE_ENERGY > 1000\r\n\t\t)\r\n\t});\r\n\r\n\r\n};","let room = \"W8N7\";\r\n\r\nmodule.exports = (creep) => {\r\n\r\n\tlet { room,  source } = creep.memory;\r\n\tlet { ogRole, currentRole, work, carry, move } = creep.memory;\r\n\r\n\tif (room === creep.room.name) {\r\n\t\tlet { x, y } = Memory.sources[source];\r\n\r\n\t\tlet distX = Math.abs(x - creep.pos.x)**2;\r\n\t\tlet distY = Math.abs(y - creep.pos.y)**2;\r\n\t\tlet inRange = (distX < 2 && distY < 2);\r\n\r\n\t\tsource = Game.getObjectById(source);\r\n\t\tif (inRange) {\r\n\t\t\tcreep.harvest(source);\r\n\t\t} else {\r\n\t\t\tcreep.moveTo(source);\r\n\t\t}\r\n\t} else {\r\n\t\tcreep.moveTo(room);\r\n\t}\r\n};","let Courier = require(\"./Roles/Courier\");\r\nlet Harvester = require(\"./Roles/Harvester\");\r\nlet Worker = require(\"./Roles/Worker\");\r\n\r\nmodule.exports = () => {\r\n\tfor (let name in Game.creeps) {\r\n\t\tlet creep = Game.creeps[name];\r\n\r\n\t\tlet role = creep.memory.currentRole;\r\n\r\n\t\tswitch ( role ) {\r\n\t\t\tcase \"harvester\":\r\n\t\t\t    Harvester(creep);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"courier\":\r\n\t\t\t    Courier(creep);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"worker\":\r\n\t\t\t    Worker(creep);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n","module.exports = () => {\r\n\tfor (let name in Game.rooms) {\r\n\t    let room = Game.rooms[name];\r\n\r\n\t\tlet towers = room.find(FIND_STRUCTURES, {\r\n\t\t\tfilter: (struct) => (\r\n\t\t\t\tstruct.structureType === STRUCTURE_TOWER\r\n\t\t\t)\r\n\t\t});\r\n\t}\r\n};","module.exports = () => {\r\n\tif (Game.time % 1 === 0) {\r\n\t\tfor (let id in Memory.creeps){\r\n\t\t\tif ( !(id in Game.creeps)) {\r\n\t\t\t\tdelete Memory.creeps[id]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};","\"use strict\";\r\n\r\nrequire(\"./Prototypes/index\");\r\n\r\nlet modules = [\r\n    //Initialize memory variables on server restnpm\r\n\trequire(\"./Helpers/Memory\"),\r\n\r\n\t//Initialize Room and Source Roles / Structures\r\n\trequire(\"./Controller/roomController\"),\r\n\trequire(\"./Controller/sourceController\"),\r\n\r\n\t//Handle Spawning\r\n\trequire(\"./Spawning/spawnController\"),\r\n\r\n\trequire(\"./Actions/runCreeps\"),\r\n\trequire(\"./Structures/towerActions\"),\r\n\r\n\trequire(\"./Helpers/cleanup\")\r\n];\r\n\r\nconsole.log(\"[][][] Cache Reset [][][]\");\r\n\r\nmodule.exports.loop = function() {\r\n\r\n\tconsole.log(\"===== LOOP START ======\");\r\n\tmodules.map(module => module() );\r\n};\r\n"],"names":["require$$0","setupHarvesters","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7"],"mappings":"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"};